* flowVC

Flow Visualization Code forked from FlowPhysics/flowVC

[[https://github.com/bkm82/flowVC/actions][https://github.com/bkm82/flowVC/workflows/CI/badge.svg]]
[[https://github.com/bkm82/flowVC/actions][https://github.com/bkm82/flowVC/workflows/CD/badge.svg]]
[[https://codecov.io/gh/bkm82/flowVC][https://codecov.io/gh/bkm82/flowVC/graph/badge.svg?token=1U1152BG8T]]


Copyright 2013 Shadden Research Group. All rights reserved.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

** Installation

*** TODO Automated Release
*** Binaries
a pre-compiled binary for linux in the releases.

*** Development
**** Dependencies
[[https://www.ruby-lang.org/en/][Ruby]] > v 3.0: A programing language used for Ceedling

[[https://github.com/ThrowTheSwitch/Ceedling][Ceedling]] : A collection of tools for C project including Unity and CMock for testing

gcovr: a code coverage reporter

**** Instalation
1. Install [[https://www.ruby-lang.org/en/][Ruby]]

2. Install Ceedling gem from the RubyGems repository
    #+begin_src shell
     gem install ceedling
   #+end_src
3. Install gcovr
   #+begin_src shell
     sudo apt install gcovr
   #+end_src
4. Clone the repository
   #+begin_src shell
     https://github.com/bkm82/flowVC.git
     cd flowVC
   #+end_src
5. To compile and run all of the tests, run
   #+begin_src shell
     ceedling test:all
   #+end_src
6. To build the relese run

   #+begin_src shell
     ceedling release
   #+end_src
   this will create the ./build/release/flowVC.out executable

   
   

**** Guidlines

***** Semantic Versioning:
This project intends to use a Trunk-Based Release with semantic versioning. Commit messages should follow [[https://www.conventionalcommits.org/en/v1.0.0/][conventional commits]]
#+begin_src shell
<type>[optional scope]: <description>
#+end_src

Where the type determines the version updates.

Valid types are fix, feat, BREAKING CHANGE, build, chore, ci, docs, style, refactor, perf, test


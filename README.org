* flowVC


[[../../actions][../../workflows/CI/badge.svg]]
[[../../actions][../../workflows/CD/badge.svg]]
[[../../actions][../../workflows/Docs/badge.svg]]


Flow Visualization Code forked from FlowPhysics/flowVC

#+begin_quote
[!TIP]
Check out the [[https://FlowPhysics.github.io/flowVC/][Docs]]
#+end_quote

Copyright 2013 Shadden Research Group. All rights reserved.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

** Capabilities
flowVC is capable of reading in 2D or 3D velocity data and

- Computing Finite Time Lyoponove Exponent (FTLE) fields
- Computing tracer/partile tragectories
- Interpolating the velocity onto another mesh

#+begin_quote
[!Note]
You cannot compute FTLE and particle trajectories at the same time. The feature to interpolate velocity data onto another mesh is mainly useful to check if the program is reading in and interpolating your velocity data correctly. The velocity data must be defined on a Cartesian OR tetrahedral (3D) / triangular (2D) mesh.
#+end_quote
  

** Usage
*** Quick Start
**** Download or Build the Latest Verison of flowVC

   #+begin_quote
   [!Note]
   Grab a pre-compiled binary for Windows Linux or macOS [[../../releases/latest][here]]
   Alternatly build it from source as shown below
   #+end_quote   
   
**** Create the input data files
   #+begin_quote
   [!Note]
   For the Input Data Files Format reference the [[https://FlowPhysics.github.io/flowVC/][Docs]]
   #+end_quote
   
   #+begin_quote
   [!TIP]
   For 3d Tetrahedral Data, the vtu_2bin in [[https://github.com/bkm82/flowVC-utils][flowVC-utils]] might be helpful!
   #+end_quote
   
**** Create a settings.in file. 
   #+begin_quote
   [!TIP]
   [[./examples/inputfile.in][Example Input File]]
   #+end_quote

   
**** Run the code from the command line
#+begin_src shell
./flowvc.out settings_file.in
#+end_src

**** Report any Issues
[[../../issues][Issues]]

** Installation

*** Build From Source
If you want to edit / modify the code, there are various ways to compile the code from source.

**** Ceedling

#+begin_quote
[!Note]
[[https://github.com/ThrowTheSwitch/Ceedling][Ceedling]] is a test-centered build system for C. It is how we test and build the release versions. It bundles some tools (Unity, CMock) together and provides a testing interface.
#+end_quote

***** Dependencies
[[https://www.ruby-lang.org/en/][Ruby]] > v 3.0: A programing language used for Ceedling

[[https://github.com/ThrowTheSwitch/Ceedling][Ceedling]]: Ceedling is a Test-Centered Build System for C. It utilizes a collection of tools for testing (Unity) and mocking (CMock) 

***** Instalation
****** Install [[https://www.ruby-lang.org/en/][Ruby]] by refering to the ruby documentation for your operating system.

****** Install Ceedling gem from the RubyGems repository
    #+begin_src shell
     gem install ceedling
   #+end_src

****** Clone the repository
   #+begin_src shell
     git clone <repo-url>
     cd flowVC
   #+end_src
****** To compile and run all of the tests, run
   #+begin_src shell
     ceedling test:all
   #+end_src
****** To build the relese run

   #+begin_src shell
     ceedling release
   #+end_src
   
   this will create the executable in the ./build/release/flowVC.out path.

**** Docker
Alternatly, there is a docker image has the tooling installed.
  #+begin_quote
   [!Warning]
   The method shown here should work, but i havent tested it extensivly.  
   #+end_quote

***** Install [[https://docs.docker.com/engine/install/][Docker]]
***** Clone the repository
   #+begin_src shell
     git clone <repo-url>
     cd flowVC
   #+end_src
   
***** Pull the docker image from docker hub [[https://hub.docker.com/r/throwtheswitch/madsciencelab][madsciencelab]] 
   #+begin_src shell
     docker pull throwtheswitch/madsciencelab:latest
   #+end_src
***** Run the tests: if you are in the flowVC directory
   #+begin_src shell
     docker run -it --rm -v <local project path>:/home/dev/project throwtheswitch/madsciencelab:latest
     ceedling test:all
   #+end_src

   #+begin_quote
   [!Note]
   If you are in the flowVC directory, you can replace the <local project path> with a "." (without the quotes)
   #+end_quote
***** Build the executable
   #+begin_src shell
     docker run -it --rm -v <local project path>:/home/dev/project throwtheswitch/madsciencelab:latest
     ceedling release     
   #+end_src
***** This will create the ./build/release/flowVC.out executable.
  
   #+begin_src shell
     docker run -it --rm -v .:/home/dev/project throwtheswitch/madsciencelab:latest
     .build/release/flowVC.out <input file>  
   #+end_src

   
**** Make
The third option is to compile the source code using the provided Make file, however this file is not currently part of the CI/CD. Issues or contributions are welcome!

** Contributing
Contributions or fixes to issues are welcome.


*** Semantic Versioning:
This project intends to use a Trunk-Based Release with semantic versioning. Commit messages should follow [[https://www.conventionalcommits.org/en/v1.0.0/][conventional commits]]
#+begin_src shell
<type>[optional scope]: <description>
#+end_src

Where the type determines the version updates.

Valid types are fix, feat, BREAKING CHANGE, build, chore, ci, docs, style, refactor, perf, test


*** Planned Updates

